WEBVTT

1
00:00:00.000 --> 00:00:03.033
Welcome, in this video, we're going to delete some tags

2
00:00:03.033 --> 00:00:06.566
both directly on GitHub, and on the local system.

3
00:00:06.566 --> 00:00:12.166
First, let's start out on GitHub; I'm currently logged in, and in the "website" GitHub repository.

4
00:00:12.166 --> 00:00:15.866
Let's go over to the "releases" tab, then click on "Tags".

5
00:00:15.866 --> 00:00:21.333
Let's say that we determine that we really weren't ready to push this tag up to GitHub.

6
00:00:21.333 --> 00:00:28.366
So, I'm going to click on the "v0.1-alpha" tag, go into that page for that specific tag,

7
00:00:28.366 --> 00:00:33.200
and then I have an option over here called delete. Click on the delete button,

8
00:00:33.200 --> 00:00:36.866
and GitHub will warn me "Are you sure you want to delete this tag?"

9
00:00:36.866 --> 00:00:41.400
Click on "Delete this tag". Now we no longer have that tag listed;

10
00:00:41.400 --> 00:00:44.500
however, that tag still exists on our local side.

11
00:00:44.500 --> 00:00:47.400
Let's go back over to our terminal, and we're currently in

12
00:00:47.400 --> 00:00:50.233
the website Git repository on our local system,

13
00:00:50.233 --> 00:00:54.100
starting off on the develop branch in a clean working directory state.

14
00:00:54.100 --> 00:00:58.033
If I do a "git tag", I can see that I have all my tags listed,

15
00:00:58.033 --> 00:01:03.066
including the "v0.1-alpha" tag, which we deleted on GitHub.

16
00:01:03.066 --> 00:01:07.233
If I do a "git fetch -p", that will fetch all the current references,

17
00:01:07.233 --> 00:01:09.666
just to make sure that I'm in sync with GitHub.

18
00:01:09.666 --> 00:01:15.033
Now, let's delete the "v0.1-alpha" tag on our local system.

19
00:01:15.033 --> 00:01:20.500
Type "git tag -d" for delete, followed by the name of the tag,

20
00:01:20.500 --> 00:01:24.766
in our case, "v0.1-alpha", then press enter.

21
00:01:24.766 --> 00:01:29.066
Git will tell us that we deleted the tag. Great, now if we do a "git tag",

22
00:01:29.066 --> 00:01:32.200
it lists all the tags available on our local system,

23
00:01:32.200 --> 00:01:35.766
and we should notice that we are missing the tag we just deleted.

24
00:01:35.766 --> 00:01:38.900
Let's list the tags again, and this time I decide that

25
00:01:38.900 --> 00:01:41.266
the other alpha tag we don't need either.

26
00:01:41.266 --> 00:01:45.800
This time, I'm going to start on the local side, and then move over to GitHub.

27
00:01:45.800 --> 00:01:52.166
If I go over to GitHub, I currently have four tags, including the other alpha tag.

28
00:01:52.166 --> 00:01:55.000
I could delete the tag on this side, but if I wanted a

29
00:01:55.000 --> 00:01:58.966
command line focused workflow, I could do it all from the terminal.

30
00:01:58.966 --> 00:02:02.533
First I'm going to start off by deleting the tag on the local side:

31
00:02:02.533 --> 00:02:06.900
"git tag -d", passing in the name of the tag. Once I've done that,

32
00:02:06.900 --> 00:02:12.666
I can also delete the tag on the remote side by pushing nothing to the tag name.

33
00:02:12.666 --> 00:02:17.733
Type "git push"; space; the name of the remote to use, which is "origin";

34
00:02:17.733 --> 00:02:22.833
space, and then just colon, immediately followed by the tag name to use;

35
00:02:22.833 --> 00:02:29.233
so, in our case, ":v0.2-alpha". Double check the line and then press enter.

36
00:02:29.233 --> 00:02:32.600
Git responds by saying the remote tag has been deleted.

37
00:02:32.600 --> 00:02:36.266
Let's check it out, and refresh the page for our tags.

38
00:02:36.266 --> 00:02:42.833
Now, none of the alpha tags are listed; we only have our beta tag.


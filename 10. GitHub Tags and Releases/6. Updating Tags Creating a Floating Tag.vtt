WEBVTT

1
00:00:00.000 --> 00:00:04.033
Welcome, in this video, we're going to update our existing tags

2
00:00:04.033 --> 00:00:07.666
to point to a new commit, and then update GitHub to reflect that.

3
00:00:07.666 --> 00:00:12.000
I'm currently on the GitHub website, in the "website" GitHub repo.

4
00:00:12.000 --> 00:00:16.800
I'm on the tags page, with three tags listed. One tag in particular

5
00:00:16.800 --> 00:00:20.600
that I wanted to draw your attention to is the tag named unstable.

6
00:00:20.600 --> 00:00:25.833
If I click on the unstable tag, it will take me to the page specific about that tag,

7
00:00:25.833 --> 00:00:30.200
and I can see, this is the commit id that is currently associated with it,

8
00:00:30.200 --> 00:00:34.333
which at this point, is the latest commit on the develop branch.

9
00:00:34.333 --> 00:00:38.166
I'm going to update this tag by adding more commits to develop

10
00:00:38.166 --> 00:00:41.466
and then move this tag forward to match the new commit id.

11
00:00:41.466 --> 00:00:45.033
Let's head over to our terminal, I'm currently on my local system,

12
00:00:45.033 --> 00:00:48.566
in the website Git repository, on the develop branch.

13
00:00:48.566 --> 00:00:52.766
Doing a "git status" shows that I currently have a clean working directory,

14
00:00:52.766 --> 00:00:57.200
so let's get started. I'm going to edit the Readme file.

15
00:00:57.200 --> 00:01:01.700
Made a few changes to the Readme file; let's save and close.

16
00:01:01.700 --> 00:01:05.266
Once you've made a commit, push those changes up to GitHub.

17
00:01:05.266 --> 00:01:11.000
Let's see our new history by typing "git log --oneline --decorate".

18
00:01:11.000 --> 00:01:14.766
And now, we have a new commit ahead of unstable; that's the commit

19
00:01:14.766 --> 00:01:18.866
that I added the commit message "Updating readme with purpose section".

20
00:01:18.866 --> 00:01:23.633
Below that, you see the commit that has the unstable tag associated.

21
00:01:23.633 --> 00:01:29.266
Let's update our tag to point to the new commit id. In order to update an existing tag,

22
00:01:29.266 --> 00:01:33.300
you need to use the "-f" option with the "git tag" command.

23
00:01:33.300 --> 00:01:39.566
Type "git tag -f"; space; and then the name of the tag to modify; space;

24
00:01:39.566 --> 00:01:43.733
and then the optional reference or the commit id to use with the tag,

25
00:01:43.733 --> 00:01:50.166
in this case "426900a". I could just a easily leave that option off,

26
00:01:50.166 --> 00:01:54.400
and the tag would have assumed the head commit on the current branch.

27
00:01:54.400 --> 00:01:56.333
Double check the line and press enter.

28
00:01:56.333 --> 00:02:00.266
Git responds with saying that it updated the tag 'unstable',

29
00:02:00.266 --> 00:02:04.866
and it told me which commit id it was associated with prior to the update.

30
00:02:04.866 --> 00:02:09.066
Now, if we do a "git log --oneline --decorate",

31
00:02:09.066 --> 00:02:12.966
we see that the tag unstable has moved up to the latest commit.

32
00:02:12.966 --> 00:02:17.700
Before we check out GitHub, let's push our commits that we have up to GitHub.

33
00:02:17.700 --> 00:02:23.500
Type "git push"; do a quick "git pull", then "git push origin develop".

34
00:02:23.500 --> 00:02:29.100
Double check GitHub, and we see that we have our latest commit,

35
00:02:29.100 --> 00:02:34.133
but if I click on releases unstable still points to the old location.

36
00:02:34.133 --> 00:02:37.333
We can see that by going to the unstable tag page,

37
00:02:37.333 --> 00:02:40.600
and it tells us that develop is ahead of us by one commit.

38
00:02:40.600 --> 00:02:44.600
Let's go back to our terminal, and let's try to push our tag.

39
00:02:44.600 --> 00:02:48.233
Like before, if we type "git push origin unstable",

40
00:02:48.233 --> 00:02:50.966
we try to push our tag named unstable;

41
00:02:50.966 --> 00:02:56.533
however, GitHub tells us that it already exists, and it rejects the push because of that.

42
00:02:56.533 --> 00:03:01.966
There are a couple ways to fix that; one way is we could delete the unstable tag on GitHub,

43
00:03:01.966 --> 00:03:06.800
and re-push, and basically replace the tag with the tag with a new location.

44
00:03:06.800 --> 00:03:09.900
However, I'm just going to do this with a "force".

45
00:03:09.900 --> 00:03:17.266
Type "git push --force origin"; space; and then our tag name, "unstable".

46
00:03:17.266 --> 00:03:22.400
The "--force" will force the push of the newly updated tag to GitHub.

47
00:03:22.400 --> 00:03:25.600
Double check, and press enter; Git pushes up that tag,

48
00:03:25.600 --> 00:03:28.500
and lets us know this was a forced update.

49
00:03:28.500 --> 00:03:31.666
In general, you want to be careful with this, because you could cause

50
00:03:31.666 --> 00:03:35.600
a lot of people grief since Git repositories are distributed.

51
00:03:35.600 --> 00:03:40.200
So, there are only a few cases where you want to update tags that are already on GitHub.

52
00:03:40.200 --> 00:03:45.100
Let's check it out back on GitHub; once on the GitHub repository, click on releases.

53
00:03:45.100 --> 00:03:50.566
And now, unstable has our new commit id. If we click on the "unstable" tag,

54
00:03:50.566 --> 00:03:56.533
there's no message saying that we're behind or ahead of develop.


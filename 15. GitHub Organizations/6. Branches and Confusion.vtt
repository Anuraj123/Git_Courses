WEBVTT

1
00:00:00.000 --> 00:00:02.866
Welcome, in this video, I would like to point out

2
00:00:02.866 --> 00:00:06.666
one particular nuance when working with multiple remotes,

3
00:00:06.666 --> 00:00:11.833
and that is how to specify a branch that exists in both remote locations.

4
00:00:11.833 --> 00:00:15.633
To show this, I'm going to return to my browser; I'm currently logged in

5
00:00:15.633 --> 00:00:19.966
and on the organizations version of the website repository.

6
00:00:19.966 --> 00:00:24.233
I'm going to create a new branch called "shared". I'm going to base it off of develop,

7
00:00:24.233 --> 00:00:28.633
by just typing the word shared in the search field for our branches; press enter.

8
00:00:28.633 --> 00:00:32.766
Great, now we have a new branch called shared in the

9
00:00:32.766 --> 00:00:36.066
organization's version of the "website" repository.

10
00:00:36.066 --> 00:00:40.366
Now I'm going to go down to my individual version of this repository.

11
00:00:40.366 --> 00:00:44.433
One way I could do that is clicking on the number of forks,

12
00:00:44.433 --> 00:00:49.200
then click on members. I see that one of my forks is my personal account,

13
00:00:49.200 --> 00:00:53.266
so I'm going to click on the "website" under my personal account.

14
00:00:53.266 --> 00:00:56.900
Once I've arrived there, I'm going to do the same thing: type "shared".

15
00:00:56.900 --> 00:01:00.100
This should create a branch called "shared" under develop.

16
00:01:00.100 --> 00:01:04.800
Now, at this point, both repositories have a branch named "shared".

17
00:01:04.800 --> 00:01:08.366
Now, let's return to the local version of the Git repository.

18
00:01:08.366 --> 00:01:12.533
Back on my local system, I'm with in the "website" Git repository

19
00:01:12.533 --> 00:01:16.133
on the "develop" branch in a clean working directory state.

20
00:01:16.133 --> 00:01:20.700
If I do a "git branch -a", it shows me all the local branches

21
00:01:20.700 --> 00:01:23.433
and remote branches it's currently aware of.

22
00:01:23.433 --> 00:01:26.800
And I say currently aware of, because we haven't fetched

23
00:01:26.800 --> 00:01:30.366
any new references that exist on the remote repositories,

24
00:01:30.366 --> 00:01:33.300
so the remote references are not currently updated

25
00:01:33.300 --> 00:01:37.566
to reflect the newly created branches on both repositories.

26
00:01:37.566 --> 00:01:43.200
To do that, we can type "git fetch --all". Doing so, Git will see that we have

27
00:01:43.200 --> 00:01:46.800
a new branch called shared in each of our remote references:

28
00:01:46.800 --> 00:01:50.233
"origin/shared" and "upstream/shared".

29
00:01:50.233 --> 00:01:54.166
At this point though, one thing to note is that our local repository

30
00:01:54.166 --> 00:02:01.200
does not have a shared branch. Well, let's try to "checkout" shared: "git checkout shared".

31
00:02:01.200 --> 00:02:04.333
In this case, however, we get an error back from Git,

32
00:02:04.333 --> 00:02:07.433
saying that it could not match any files known to Git.

33
00:02:07.433 --> 00:02:11.733
Now, if you don't know what's going on, you might be a little confused by this error message.

34
00:02:11.733 --> 00:02:16.066
Git basically has an order of precedence, which it tries to checkout

35
00:02:16.066 --> 00:02:18.966
whatever you type in to the checkout command,

36
00:02:18.966 --> 00:02:21.833
in some cases, that's actual the name of a file.

37
00:02:21.833 --> 00:02:25.600
That's when it doesn't match a particular branch or tag name.

38
00:02:25.600 --> 00:02:29.800
And, you might be wondering, well we have shared in both "origin" and "upstream",

39
00:02:29.800 --> 00:02:33.033
so it could have matched one of those; but, Git doesn’t work that way.

40
00:02:33.033 --> 00:02:37.166
If we only had origin, then Git would have been smart enough to detect

41
00:02:37.166 --> 00:02:40.866
that we really meant origin shared, and would have made the connection,

42
00:02:40.866 --> 00:02:44.800
checked out that branch, and associated a tracking branch between

43
00:02:44.800 --> 00:02:48.166
"origin/shared' and a newly created branch called "shared".

44
00:02:48.166 --> 00:02:51.466
We have to use the "git checkout" command, just slightly differently

45
00:02:51.466 --> 00:02:54.600
to associate "origin/shared" with a new branch.

46
00:02:54.600 --> 00:02:58.666
Type "git checkout -b", which is to create a new branch

47
00:02:58.666 --> 00:03:02.000
since this will be a new branch on the local repository;

48
00:03:02.000 --> 00:03:05.800
space; and then the name of the branch, which we'll just call it "shared";

49
00:03:05.800 --> 00:03:11.866
space; and then our starting point, which our starting point will be "origin/shared".

50
00:03:11.866 --> 00:03:17.100
Once you've done that, press enter; Git responds that branch "shared" is set up to track

51
00:03:17.100 --> 00:03:21.000
remote branch shared from origin, which is exactly what we wanted,

52
00:03:21.000 --> 00:03:24.000
and we switched to the "shared' branch.

53
00:03:24.000 --> 00:03:27.633
Since this is a tracking branch, we can simply type "git pull"

54
00:03:27.633 --> 00:03:32.400
and it goes out to GitHub to make sure that we're up-to-date.


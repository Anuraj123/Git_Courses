WEBVTT

1
00:00:00.000 --> 00:00:04.933
Welcome, in this video, we're going to look at checking out a branch from GitHub.

2
00:00:04.933 --> 00:00:09.100
In addition to starting with a branch on your local repository

3
00:00:09.100 --> 00:00:12.866
and then pushing it up to GitHub, you could also work from the other direction,

4
00:00:12.866 --> 00:00:15.066
which is to create a branch on GitHub,

5
00:00:15.066 --> 00:00:17.900
then check out that particular branch on your local system.

6
00:00:17.900 --> 00:00:20.600
To start off, I'm going to create a new branch on GitHub.

7
00:00:20.600 --> 00:00:25.100
I'm going to call this branch "update-readme". Press enter to create that branch.

8
00:00:25.100 --> 00:00:28.033
It's currently even with master, which is what we expect.

9
00:00:28.033 --> 00:00:32.133
Let's go into the "README.md" file; let's make an edit to this file.

10
00:00:32.133 --> 00:00:34.933
Once you're done with the edit, put in a commit message,

11
00:00:34.933 --> 00:00:39.600
I'm using the commit message "Tweaked readme", then click on "Commit changes".

12
00:00:39.600 --> 00:00:42.300
Great, now click on the name of the repository;

13
00:00:42.300 --> 00:00:44.966
we're back on the main page, and back on master.

14
00:00:44.966 --> 00:00:49.266
Let's say that I want to continue making changes to the "update-readme" branch,

15
00:00:49.266 --> 00:00:53.433
but I want to do that on my local system. Let's switch back over to our terminal,

16
00:00:53.433 --> 00:00:57.433
and I'm currently in the website Git repository on my local system.

17
00:00:57.433 --> 00:01:00.400
I'm on the master branch, and in a clean working directory.

18
00:01:00.400 --> 00:01:05.700
Doing a "git branch -a" shows that I have master and a reference to 'origin/master'.

19
00:01:05.700 --> 00:01:07.766
I know I just created a branch on GitHub,

20
00:01:07.766 --> 00:01:11.233
so I need to fetch those changes before I can continue.

21
00:01:11.233 --> 00:01:14.600
Typing "git fetch" will update our remote, which would include

22
00:01:14.600 --> 00:01:17.033
any new branches that it might be aware of.

23
00:01:17.033 --> 00:01:20.966
And, at the end, you can see that we have a new branch "update-readme".

24
00:01:20.966 --> 00:01:24.600
Now our references show an "update-readme" on origin.

25
00:01:24.600 --> 00:01:27.600
There are several ways that I can link a local branch

26
00:01:27.600 --> 00:01:32.200
with the "update-readme" on GitHub, but the simplest way is just to check it out.

27
00:01:32.200 --> 00:01:36.466
Type "git checkout"; space; and then the name of the branch

28
00:01:36.466 --> 00:01:39.766
that you want to checkout, even though this branch isn't local.

29
00:01:39.766 --> 00:01:43.466
Now, this only works if you have a single remote repository;

30
00:01:43.466 --> 00:01:46.633
and the reason why this works, is that Git will figure out

31
00:01:46.633 --> 00:01:49.733
what you mean by the name of the branch that you're specifying.

32
00:01:49.733 --> 00:01:54.233
It's first going to look for a local branch named "update-readme",

33
00:01:54.233 --> 00:01:59.433
and when it fails to find it, it will look for the name of that branch among the remotes.

34
00:01:59.433 --> 00:02:03.166
As long as the branch name is unique among your remotes,

35
00:02:03.166 --> 00:02:06.766
it will find it and be able to check out that branch;

36
00:02:06.766 --> 00:02:11.133
however, if you have a scenario where you have multiple remotes

37
00:02:11.133 --> 00:02:16.033
pointing to similar repositories, where there are overlaps with the names of the branches,

38
00:02:16.033 --> 00:02:20.500
Git is not going to be able to figure that out, and thus you'll need to take another approach

39
00:02:20.500 --> 00:02:25.833
to link a local branch with the specific branch on your remote that you want to link.

40
00:02:25.833 --> 00:02:31.066
However, in this case, Git was able to find the "update-readme" on GitHub,

41
00:02:31.066 --> 00:02:34.233
since we only have a single remote named origin;

42
00:02:34.233 --> 00:02:38.100
and, in doing so, it made the assumption that I want to track the branch,

43
00:02:38.100 --> 00:02:44.066
so that my local version of "update-readme" is tracking to the GitHub version of it.

44
00:02:44.066 --> 00:02:49.433
It also automatically switched me to that new branch, which it is a new branch locally.

45
00:02:49.433 --> 00:02:55.200
If I do a "git branch -a", you can see that I have a new local branch, "update-readme",

46
00:02:55.200 --> 00:02:59.933
and technically, they are two different, distinct, branches, because I'm working with

47
00:02:59.933 --> 00:03:05.333
two different repositories; a local repository and a remote repository.

48
00:03:05.333 --> 00:03:10.233
Let's open up our Readme file; you can see that we have the edits that we made on GitHub.

49
00:03:10.233 --> 00:03:13.366
Let's make some further edits; I'm just going to delete this line.

50
00:03:13.366 --> 00:03:16.700
Great, so I've made some edits; going to save and close.

51
00:03:16.700 --> 00:03:20.900
Back on the terminal, I'm going to commit those changes: "More tweaks to README".

52
00:03:20.900 --> 00:03:24.266
Alright, so now we're ready to push up our changes.

53
00:03:24.266 --> 00:03:27.933
And, since this is a tracking branch, we don't need to specify

54
00:03:27.933 --> 00:03:33.100
the remote reference or the branch; we're going to assume the tracking relationship,

55
00:03:33.100 --> 00:03:36.366
wherever that happens to be pointing with our current branch.

56
00:03:36.366 --> 00:03:39.066
"git push", and Git figures out I mean

57
00:03:39.066 --> 00:03:43.333
push to the corresponding "update-readme" branch on GitHub.

58
00:03:43.333 --> 00:03:47.900
Let's check it out; if I refresh my browser, I'm going to switch to that branch

59
00:03:47.900 --> 00:03:51.533
I can see my commit message that I've made on the local side,

60
00:03:51.533 --> 00:03:57.266
and if I click on "README.md", you can see my changes that I made locally.


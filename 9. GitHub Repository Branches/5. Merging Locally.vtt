WEBVTT

1
00:00:00.000 --> 00:00:03.266
Welcome, in this video, I'm going to show you an alternative way

2
00:00:03.266 --> 00:00:08.133
to integrate your changes into the master branch, this time from the local side.

3
00:00:08.133 --> 00:00:13.366
I'm currently on GitHub, logged in, and on the website GitHub repository.

4
00:00:13.366 --> 00:00:16.666
I'm currently on the master branch, and GitHub is letting us know

5
00:00:16.666 --> 00:00:20.433
that we have this "remove-ipsum" branch just laying around.

6
00:00:20.433 --> 00:00:25.100
Since it's a recent branch, the GitHub interface thinks we might want to do a pull request,

7
00:00:25.100 --> 00:00:27.433
and most of the time that would probably be true;

8
00:00:27.433 --> 00:00:31.633
however, I'm going to integrate the changes that I have on the local side.

9
00:00:31.633 --> 00:00:34.366
So, let's hop over to our terminal.

10
00:00:34.366 --> 00:00:38.666
Back on our system, I'm currently in the website Git repository,

11
00:00:38.666 --> 00:00:44.033
and I'm on the "remove-ipsum" branch. Since we just pushed everything up,

12
00:00:44.033 --> 00:00:46.366
the branch is in a clean working directory state

13
00:00:46.366 --> 00:00:52.200
and it is up-to-date with 'origin/remove-ipsum', which is a tracking branch.

14
00:00:52.200 --> 00:00:57.233
In order to integrate our changes into master, we need to change back to the master branch.

15
00:00:57.233 --> 00:01:02.733
Switching branches in Git, we need to use the "checkout" command: "git checkout master".

16
00:01:02.733 --> 00:01:06.833
Once you've switched to the master branch, since we haven't fetched anything recently,

17
00:01:06.833 --> 00:01:09.833
our local repo doesn't realize that it's actually out of date.

18
00:01:09.833 --> 00:01:15.966
So, I know that the changes should be fairly benign, so I'm just going to do a "git pull".

19
00:01:15.966 --> 00:01:20.000
Great, now we've integrated all the changes that have changed on master

20
00:01:20.000 --> 00:01:23.833
from our GitHub repository. So, now we're ready to integrate our changes

21
00:01:23.833 --> 00:01:27.466
that we have on our local "remove-ipsum" branch.

22
00:01:27.466 --> 00:01:34.366
Type "git merge"; space; and then the branch to merge in, which is "remove-ipsum".

23
00:01:34.366 --> 00:01:38.733
Since this is not a fast-forward merge, but it is still an automatic merge,

24
00:01:38.733 --> 00:01:43.533
I'm being prompted for my merge message, with a default message being provided.

25
00:01:43.533 --> 00:01:47.400
I'm going to save and close, and whatever I typed in my default editor

26
00:01:47.400 --> 00:01:50.466
will be used as the merge commit's message.

27
00:01:50.466 --> 00:01:56.233
Using "git status", we see that our local master is "ahead of 'origin/master' by 2 commits",

28
00:01:56.233 --> 00:02:00.933
which would be the commits for the actual deletion of the "lipsum.txt" file

29
00:02:00.933 --> 00:02:05.000
and then our merge commit that we had when we did the merge back into master.

30
00:02:05.000 --> 00:02:08.633
So now, let's synchronize our local changes back up to GitHub.

31
00:02:08.633 --> 00:02:12.866
Great, now we just pushed up to master; let's check it out on GitHub.

32
00:02:12.866 --> 00:02:16.066
One of the things you'll notice is the bar that was advertising

33
00:02:16.066 --> 00:02:19.466
the "remove-ipsum" branch is not here anymore.

34
00:02:19.466 --> 00:02:23.300
And that's because GitHub detected that we integrated our changes

35
00:02:23.300 --> 00:02:26.433
that were in that branch locally, and pushed them up so that

36
00:02:26.433 --> 00:02:30.833
now master reflects the same commits as the other branch.

37
00:02:30.833 --> 00:02:35.900
The other branch is still here, but now master and that other branch are now equal.

38
00:02:35.900 --> 00:02:42.966
Let's check it out; before on master we had our "lipsum.txt" file, and now we do not.

39
00:02:42.966 --> 00:02:46.466
Let's change to the "remove-ipsum" branch.

40
00:02:46.466 --> 00:02:50.500
When we switch to this branch, it tells us "This branch is 3 commits behind master",

41
00:02:50.500 --> 00:02:52.900
that's because this branch doesn't have the changes

42
00:02:52.900 --> 00:02:56.766
from the example branch that was integrated into master already,

43
00:02:56.766 --> 00:03:01.500
and it doesn't have the merge commits associated with merging back into master.

44
00:03:01.500 --> 00:03:05.600
Now, let's go to the branches tab; since we know we have all the commits

45
00:03:05.600 --> 00:03:10.700
that were associated with the "remove-ipsum" branch, we no longer need this branch.

46
00:03:10.700 --> 00:03:14.366
So, let's delete this branch; we can do that from the branches page.

47
00:03:14.366 --> 00:03:18.900
Just go over to the trash can icon associated with the branch you wish to delete.

48
00:03:18.900 --> 00:03:22.066
Hover over it, and it will say "Delete this branch".

49
00:03:22.066 --> 00:03:25.500
Now, click on that icon, and that will delete the branch.

50
00:03:25.500 --> 00:03:29.800
You have a little bit of saving grace here, because until you refresh this page

51
00:03:29.800 --> 00:03:32.466
you have the option to restore the branch.

52
00:03:32.466 --> 00:03:38.000
Once you refresh this page or navigate away from this page, the restore ability goes away.

53
00:03:38.000 --> 00:03:42.933
Great, let's click on the name of the repository, and that takes us back to our master branch.

54
00:03:42.933 --> 00:03:47.200
Click on the drop down, and you can see that we are left with just the master branch.

55
00:03:47.200 --> 00:03:50.100
However, we're not done yet; let's go back to our terminal,

56
00:03:50.100 --> 00:03:53.766
and we have two things going on. If I do a "git branch -a",

57
00:03:53.766 --> 00:03:58.033
I can see that I have a "remove-ipsum" branch still laying around.

58
00:03:58.033 --> 00:04:00.300
That's the local branch that we started out with

59
00:04:00.300 --> 00:04:04.500
before we pushed it up to GitHub and then later merged it back into master.

60
00:04:04.500 --> 00:04:08.800
We also still have that branch on GitHub, or at least the reference to it;

61
00:04:08.800 --> 00:04:12.633
that's under "remotes/origin/", branch name.

62
00:04:12.633 --> 00:04:16.766
So, let's fix both of those things; first thing I'm going to do is delete our branch.

63
00:04:16.766 --> 00:04:23.500
"git branch -d" for delete; space; and then our branch name, which is "remove-ipsum".

64
00:04:23.500 --> 00:04:25.566
Great, we have deleted that branch.

65
00:04:25.566 --> 00:04:28.333
Now, Git would have warned us if we had not already

66
00:04:28.333 --> 00:04:32.066
integrated those changes into master, so that's an important step.

67
00:04:32.066 --> 00:04:36.833
Now, if I do a "git branch -a", we are left with a master branch locally

68
00:04:36.833 --> 00:04:41.000
but we still have the "remove-ipsum" branch referenced on origin;

69
00:04:41.000 --> 00:04:44.433
however, we know that that branch doesn't exist on GitHub,

70
00:04:44.433 --> 00:04:48.433
it's just a stale reference. So, we need to update those stale references.

71
00:04:48.433 --> 00:04:51.466
And one way to do that is with the "fetch" command.

72
00:04:51.466 --> 00:04:57.233
Type "git fetch"; space; and then "-p", the "-p" is the prune option,

73
00:04:57.233 --> 00:05:01.533
which means it's going to look for any dead branches and remove those references.

74
00:05:01.533 --> 00:05:03.666
Double check that line, and then press enter.

75
00:05:03.666 --> 00:05:07.666
You can see that Git found a deleted branch, which it removed.

76
00:05:07.666 --> 00:05:12.800
Now doing a "git branch -a", we see that we have master like before, locally,

77
00:05:12.800 --> 00:05:15.666
and now we only have master on the remote side,

78
00:05:15.666 --> 00:05:19.000
and then, of course, our special pointer called "HEAD". Either way,

79
00:05:19.000 --> 00:05:26.666
the "remove-ipsum" branch is no longer locally referenced or pointing to our remote.

